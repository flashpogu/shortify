version: "3.9"

services:
  traefik:
    image: traefik:v3.1
    container_name: traefik
    command:
      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=you@example.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" # <-- dashboard access
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./letsencrypt:/letsencrypt
    networks:
      - app-net

  api:
    build: ./api
    container_name: url_shortener_api
    env_file: .env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=PathPrefix(`/api`)"
      - "traefik.http.routers.api.entrypoints=web"
      - "traefik.http.routers.api.middlewares=api-strip"
      - "traefik.http.middlewares.api-strip.stripprefix.prefixes=/api"
      - "traefik.http.services.api.loadbalancer.server.port=8080"
    networks:
      - app-net
    depends_on:
      - postgres
      - redis

  client:
    build: ./client
    container_name: url_shortener_client
    environment:
      NEXT_PUBLIC_API_URL: "http://localhost/api"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.client.rule=PathPrefix(`/`)"
      - "traefik.http.routers.client.entrypoints=web"
      - "traefik.http.services.client.loadbalancer.server.port=3000"
    networks:
      - app-net
    depends_on:
      - api

  postgres:
    image: postgres:16
    env_file: .env
    networks:
      - app-net
    volumes:
      - pgdata:/var/lib/postgresql/data

  redis:
    image: redis:latest
    networks:
      - app-net

networks:
  app-net:
    driver: bridge

volumes:
  pgdata:
